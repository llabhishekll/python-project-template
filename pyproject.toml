# ------------------------------ BUILD ------------------------------ #

[build-system]
requires = ["setuptools", "setuptools-scm"]
build-backend = "setuptools.build_meta"

# ----------------------------- PROJECT ----------------------------- #

[project]
name = "package" ## Modify here
authors = [{ name = "Abhishek Verma", email = "abhishek_verma@hotmail.com" }]
description = "A python project template." ## Modify here
readme = "README.md"
license = { file = "LICENSE" }
requires-python = ">=3.10"
classifiers = [
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Operating System :: Microsoft :: Windows",
    "Operating System :: POSIX :: Linux",
    "Operating System :: POSIX",
    "Operating System :: Unix",
    "Operating System :: MacOS",
]
dependencies = [""]
dynamic = ["version"]

[project.scripts]
package = "package.cli:cli" ## Modify here

[project.optional-dependencies]
test = ["pytest", "pytest-cov", "codecov", "pre-commit"]
doc = [
    "mkdocs",
    "mkdocstrings",
    "mkdocstrings[python]",
    "mkdocs-material",
    "Pygments",
]
dev = ["black", "isort", "mypy", "pre-commit", "ruff"]
all = ["package[test,doc,dev]"]

[tool.setuptools]
platforms = ["unix", "linux", "osx", "cygwin", "win32"]
packages = [ ## Modify here
    "package",
]

[tool.setuptools.dynamic]
version = { attr = "package.__version__" } ## Modify here

# ------------------------------- TEST ------------------------------ #

[tool.pytest.ini_options]
minversion = "7.3"
testpaths = "tests"

[tool.coverage.run]
branch = true
parallel = true
omit = [ ## Modify here
    "package/__init__.py",
    "package/version.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "raise AssertionError",
    "raise NotImplementedError",
]

[tool.coverage.paths]
source = [ ## Modify here
    "package/*",
]

[tool.coverage.html]
directory = "reports"

# ------------------------------ TOOLS ------------------------------ #

[tool.black]
line-length = 80
skip-string-normalization = false
skip-magic-trailing-comma = false
exclude = '''
(
    asv_bench/env
  | \.egg
  | \.git
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | setup.py
)
'''

[tool.isort]
sections = ["FUTURE", "STDLIB", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]
default_section = "FIRSTPARTY"
known_third_party = [
    "numpy",
    "pandas",
    "keras",
    "tensorflow",
    "sklearn",
    "matplotlib",
    "scipy",
    "h5py",
    "seaborn",
    "numba",
    "gym",
    "PyQt6",
    "PyQt5",
    "pyqtgraph",
]
multi_line_output = 3
lines_after_imports = 2
force_single_line = true
use_parentheses = true
ensure_newline_before_comments = true
line_length = 80

[tool.mypy]
warn_return_any = true
warn_unused_configs = true
ignore = []
follow_imports = "silent"
check_untyped_defs = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
disallow_subclassing_any = true
strict_optional = true
no_implicit_optional = true
warn_no_return = true
warn_unreachable = true
allow_untyped_globals = false
allow_redefinition = false
local_partial_types = false
implicit_reexport = true
strict_equality = true

[tool.ruff]
select = [
    "F",   # pyflakes
    "E",   # pycodestyle (error)
    "W",   # pycodestyle (warning)
    "I",   # isort
    "N",   # pep8-naming
    "D",   # pydocstyle
    "UP",  # pyupgrade
    "PL",  # Pylint
    "RUF", # Ruff-specific
]
extend-select = [
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "PT",  # flake8-pytest-style
    "SLF", # flake8-self
    "SIM", # flake8-simplify
    "PTH", # flake8-use-pathlib
    "PD",  # pandas-vet
    "NPY", # NumPy-specific
]
unfixable = ["NPY002"]
ignore = ["I", "D"]
fixable = ["F", "E", "W", "I", "B", "SIM", "PT", "UP", "PL", "NPY", "RUF", "PD"]

line-length = 80
extend-exclude = ["tests", "test"]
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.isort]
force-single-line = true
force-sort-within-sections = false
lines-after-imports = 2

[tool.ruff.mccabe]
max-complexity = 10

[tool.ruff.pycodestyle]
ignore-overlong-task-comments = true

[tool.ruff.pydocstyle]
convention = "google"

[tool.ruff.flake8-quotes]
docstring-quotes = "double"
